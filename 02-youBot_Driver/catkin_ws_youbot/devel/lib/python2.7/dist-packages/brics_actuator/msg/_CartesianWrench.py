# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from brics_actuator/CartesianWrench.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import brics_actuator.msg
import genpy

class CartesianWrench(genpy.Message):
  _md5sum = "9db8d24ea10e69de8feff86a9b0fa93d"
  _type = "brics_actuator/CartesianWrench"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time timeStamp
Poison poisonStamp
string base_frame_uri
string target_frame_uri
# need some more frames?	
CartesianVector force
CartesianVector torque	

================================================================================
MSG: brics_actuator/Poison
string originator 		# node id
string description 		# encoding still an issue
float32 qos			# reliability of the channel
				# 0..1 where 1 means healthy

================================================================================
MSG: brics_actuator/CartesianVector
string unit
float64 x
float64 y
float64 z
"""
  __slots__ = ['timeStamp','poisonStamp','base_frame_uri','target_frame_uri','force','torque']
  _slot_types = ['time','brics_actuator/Poison','string','string','brics_actuator/CartesianVector','brics_actuator/CartesianVector']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeStamp,poisonStamp,base_frame_uri,target_frame_uri,force,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartesianWrench, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeStamp is None:
        self.timeStamp = genpy.Time()
      if self.poisonStamp is None:
        self.poisonStamp = brics_actuator.msg.Poison()
      if self.base_frame_uri is None:
        self.base_frame_uri = ''
      if self.target_frame_uri is None:
        self.target_frame_uri = ''
      if self.force is None:
        self.force = brics_actuator.msg.CartesianVector()
      if self.torque is None:
        self.torque = brics_actuator.msg.CartesianVector()
    else:
      self.timeStamp = genpy.Time()
      self.poisonStamp = brics_actuator.msg.Poison()
      self.base_frame_uri = ''
      self.target_frame_uri = ''
      self.force = brics_actuator.msg.CartesianVector()
      self.torque = brics_actuator.msg.CartesianVector()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.timeStamp.secs, _x.timeStamp.nsecs))
      _x = self.poisonStamp.originator
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.poisonStamp.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.poisonStamp.qos))
      _x = self.base_frame_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.target_frame_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.force.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.force.x, _x.force.y, _x.force.z))
      _x = self.torque.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.torque.x, _x.torque.y, _x.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timeStamp is None:
        self.timeStamp = genpy.Time()
      if self.poisonStamp is None:
        self.poisonStamp = brics_actuator.msg.Poison()
      if self.force is None:
        self.force = brics_actuator.msg.CartesianVector()
      if self.torque is None:
        self.torque = brics_actuator.msg.CartesianVector()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timeStamp.secs, _x.timeStamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poisonStamp.originator = str[start:end].decode('utf-8')
      else:
        self.poisonStamp.originator = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poisonStamp.description = str[start:end].decode('utf-8')
      else:
        self.poisonStamp.description = str[start:end]
      start = end
      end += 4
      (self.poisonStamp.qos,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_uri = str[start:end].decode('utf-8')
      else:
        self.base_frame_uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame_uri = str[start:end].decode('utf-8')
      else:
        self.target_frame_uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.force.unit = str[start:end].decode('utf-8')
      else:
        self.force.unit = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.force.x, _x.force.y, _x.force.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.torque.unit = str[start:end].decode('utf-8')
      else:
        self.torque.unit = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.torque.x, _x.torque.y, _x.torque.z,) = _struct_3d.unpack(str[start:end])
      self.timeStamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.timeStamp.secs, _x.timeStamp.nsecs))
      _x = self.poisonStamp.originator
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.poisonStamp.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.poisonStamp.qos))
      _x = self.base_frame_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.target_frame_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.force.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.force.x, _x.force.y, _x.force.z))
      _x = self.torque.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.torque.x, _x.torque.y, _x.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timeStamp is None:
        self.timeStamp = genpy.Time()
      if self.poisonStamp is None:
        self.poisonStamp = brics_actuator.msg.Poison()
      if self.force is None:
        self.force = brics_actuator.msg.CartesianVector()
      if self.torque is None:
        self.torque = brics_actuator.msg.CartesianVector()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timeStamp.secs, _x.timeStamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poisonStamp.originator = str[start:end].decode('utf-8')
      else:
        self.poisonStamp.originator = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poisonStamp.description = str[start:end].decode('utf-8')
      else:
        self.poisonStamp.description = str[start:end]
      start = end
      end += 4
      (self.poisonStamp.qos,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_uri = str[start:end].decode('utf-8')
      else:
        self.base_frame_uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame_uri = str[start:end].decode('utf-8')
      else:
        self.target_frame_uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.force.unit = str[start:end].decode('utf-8')
      else:
        self.force.unit = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.force.x, _x.force.y, _x.force.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.torque.unit = str[start:end].decode('utf-8')
      else:
        self.torque.unit = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.torque.x, _x.torque.y, _x.torque.z,) = _struct_3d.unpack(str[start:end])
      self.timeStamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
_struct_2I = struct.Struct("<2I")
_struct_f = struct.Struct("<f")
