//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the realsense_camera package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __realsense_camera__REALSENSECAMERACONFIG_H__
#define __realsense_camera__REALSENSECAMERACONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace realsense_camera
{
  class RealsenseCameraConfigStatics;
  
  class RealsenseCameraConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(RealsenseCameraConfig &config, const RealsenseCameraConfig &max, const RealsenseCameraConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RealsenseCameraConfig &config1, const RealsenseCameraConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RealsenseCameraConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RealsenseCameraConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RealsenseCameraConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RealsenseCameraConfig &config) const = 0;
      virtual void getValue(const RealsenseCameraConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T RealsenseCameraConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (RealsenseCameraConfig::* field);

      virtual void clamp(RealsenseCameraConfig &config, const RealsenseCameraConfig &max, const RealsenseCameraConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RealsenseCameraConfig &config1, const RealsenseCameraConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RealsenseCameraConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RealsenseCameraConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RealsenseCameraConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RealsenseCameraConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RealsenseCameraConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RealsenseCameraConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RealsenseCameraConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<RealsenseCameraConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RealsenseCameraConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("laser_power"==(*_i)->name){laser_power = boost::any_cast<int>(val);}
        if("accuracy"==(*_i)->name){accuracy = boost::any_cast<int>(val);}
        if("motion_range_trade_off"==(*_i)->name){motion_range_trade_off = boost::any_cast<int>(val);}
        if("filter_option"==(*_i)->name){filter_option = boost::any_cast<int>(val);}
        if("confidence_threshold"==(*_i)->name){confidence_threshold = boost::any_cast<int>(val);}
      }
    }

    int laser_power;
int accuracy;
int motion_range_trade_off;
int filter_option;
int confidence_threshold;

    bool state;
    std::string name;

    
}groups;



//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int laser_power;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int accuracy;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int motion_range_trade_off;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int filter_option;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int confidence_threshold;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RealsenseCameraConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RealsenseCameraConfig &__max__ = __getMax__();
      const RealsenseCameraConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RealsenseCameraConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RealsenseCameraConfig &__getDefault__();
    static const RealsenseCameraConfig &__getMax__();
    static const RealsenseCameraConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const RealsenseCameraConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void RealsenseCameraConfig::ParamDescription<std::string>::clamp(RealsenseCameraConfig &config, const RealsenseCameraConfig &max, const RealsenseCameraConfig &min) const
  {
    return;
  }

  class RealsenseCameraConfigStatics
  {
    friend class RealsenseCameraConfig;
    
    RealsenseCameraConfigStatics()
    {
RealsenseCameraConfig::GroupDescription<RealsenseCameraConfig::DEFAULT, RealsenseCameraConfig> Default("Default", "", 0, 0, true, &RealsenseCameraConfig::groups);
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.laser_power = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.laser_power = 16;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.laser_power = 16;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("laser_power", "int", 0, "Laser Power", "", &RealsenseCameraConfig::laser_power)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("laser_power", "int", 0, "Laser Power", "", &RealsenseCameraConfig::laser_power)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.accuracy = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.accuracy = 3;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.accuracy = 2;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("accuracy", "int", 0, "Accuracy - The projected pattern", "{'enum_description': 'An enum to set accuracy', 'enum': [{'srcline': 12, 'description': '11 patterns, 50fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Finest'}, {'srcline': 13, 'description': '10 patterns, 55fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Median'}, {'srcline': 14, 'description': '9 patterns, 60fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Coarse'}]}", &RealsenseCameraConfig::accuracy)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("accuracy", "int", 0, "Accuracy - The projected pattern", "{'enum_description': 'An enum to set accuracy', 'enum': [{'srcline': 12, 'description': '11 patterns, 50fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Finest'}, {'srcline': 13, 'description': '10 patterns, 55fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Median'}, {'srcline': 14, 'description': '9 patterns, 60fps', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Coarse'}]}", &RealsenseCameraConfig::accuracy)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_range_trade_off = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_range_trade_off = 100;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_range_trade_off = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("motion_range_trade_off", "int", 0, "Motion Range Trade Off - Short exposure and short range (0) to long exposure and long range (100)", "", &RealsenseCameraConfig::motion_range_trade_off)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("motion_range_trade_off", "int", 0, "Motion Range Trade Off - Short exposure and short range (0) to long exposure and long range (100)", "", &RealsenseCameraConfig::motion_range_trade_off)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.filter_option = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.filter_option = 7;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.filter_option = 5;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("filter_option", "int", 0, "The smoothing aggressiveness parameter", "{'enum_description': 'An enum to set filter options', 'enum': [{'srcline': 20, 'description': 'Reports the depth data for high fidelity (high confidence) pixels only, and all other pixels as invalid.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'skeleton'}, {'srcline': 21, 'description': 'Raw depth image without any post-processing filters.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'raw'}, {'srcline': 22, 'description': 'Raw depth image  with the gradient filter applied.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'raw_and_gradients_filter'}, {'srcline': 23, 'description': 'Very low smoothing effect with high sharpness, accuracy levels, and low noise artifacts. Good for any distances of up to 350mm.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'very_close_range'}, {'srcline': 24, 'description': 'Low smoothing effect with high sharpness and accuracy levels. The noise artifacts are optimized for distances between 350mm to 550mm.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'close_range'}, {'srcline': 25, 'description': 'Moderate smoothing effect optimized for distances between 550mm to 850mm to balance between good sharpness level, high accuracy and moderate noise artifacts.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'mid_range'}, {'srcline': 26, 'description': 'High smoothing effect for distances between 850mm to 1000mm bringing good accuracy with moderate sharpness level.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'far_range'}, {'srcline': 27, 'description': 'Very high smoothing effect to bring moderate accuracy level for distances above 1000mm. Use together with the MotionRangeTradeOff property to increase the depth range.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'very_far_range'}]}", &RealsenseCameraConfig::filter_option)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("filter_option", "int", 0, "The smoothing aggressiveness parameter", "{'enum_description': 'An enum to set filter options', 'enum': [{'srcline': 20, 'description': 'Reports the depth data for high fidelity (high confidence) pixels only, and all other pixels as invalid.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'skeleton'}, {'srcline': 21, 'description': 'Raw depth image without any post-processing filters.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'raw'}, {'srcline': 22, 'description': 'Raw depth image  with the gradient filter applied.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'raw_and_gradients_filter'}, {'srcline': 23, 'description': 'Very low smoothing effect with high sharpness, accuracy levels, and low noise artifacts. Good for any distances of up to 350mm.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'very_close_range'}, {'srcline': 24, 'description': 'Low smoothing effect with high sharpness and accuracy levels. The noise artifacts are optimized for distances between 350mm to 550mm.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'close_range'}, {'srcline': 25, 'description': 'Moderate smoothing effect optimized for distances between 550mm to 850mm to balance between good sharpness level, high accuracy and moderate noise artifacts.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'mid_range'}, {'srcline': 26, 'description': 'High smoothing effect for distances between 850mm to 1000mm bringing good accuracy with moderate sharpness level.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'far_range'}, {'srcline': 27, 'description': 'Very high smoothing effect to bring moderate accuracy level for distances above 1000mm. Use together with the MotionRangeTradeOff property to increase the depth range.', 'srcfile': '/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'very_far_range'}]}", &RealsenseCameraConfig::filter_option)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.confidence_threshold = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.confidence_threshold = 15;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.confidence_threshold = 6;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("confidence_threshold", "int", 0, "The confidence threshold that is used to floor the depth map values.", "", &RealsenseCameraConfig::confidence_threshold)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RealsenseCameraConfig::AbstractParamDescriptionConstPtr(new RealsenseCameraConfig::ParamDescription<int>("confidence_threshold", "int", 0, "The confidence threshold that is used to floor the depth map values.", "", &RealsenseCameraConfig::confidence_threshold)));
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RealsenseCameraConfig::AbstractGroupDescriptionConstPtr(new RealsenseCameraConfig::GroupDescription<RealsenseCameraConfig::DEFAULT, RealsenseCameraConfig>(Default)));
//#line 353 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RealsenseCameraConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<RealsenseCameraConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RealsenseCameraConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RealsenseCameraConfig __max__;
    RealsenseCameraConfig __min__;
    RealsenseCameraConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RealsenseCameraConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RealsenseCameraConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RealsenseCameraConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const RealsenseCameraConfig &RealsenseCameraConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const RealsenseCameraConfig &RealsenseCameraConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const RealsenseCameraConfig &RealsenseCameraConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<RealsenseCameraConfig::AbstractParamDescriptionConstPtr> &RealsenseCameraConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RealsenseCameraConfig::AbstractGroupDescriptionConstPtr> &RealsenseCameraConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RealsenseCameraConfigStatics *RealsenseCameraConfig::__get_statics__()
  {
    const static RealsenseCameraConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RealsenseCameraConfigStatics::get_instance();
    
    return statics;
  }

//#line 12 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_Finest = 1;
//#line 13 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_Median = 2;
//#line 14 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_Coarse = 3;
//#line 20 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_skeleton = 0;
//#line 21 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_raw = 1;
//#line 22 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_raw_and_gradients_filter = 2;
//#line 23 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_very_close_range = 3;
//#line 24 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_close_range = 4;
//#line 25 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_mid_range = 5;
//#line 26 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_far_range = 6;
//#line 27 "/home/chao/catkin_ws_youbot/src/realsense_camera/config/RealsenseCamera.cfg"
      const int RealsenseCamera_very_far_range = 7;
}

#endif // __REALSENSECAMERARECONFIGURATOR_H__
